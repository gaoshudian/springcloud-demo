spring.application.name=micro-web
server.port=8053


eureka.client.serviceUrl.defaultZone=http://admin:admin@localhost:8763/eureka/
#服务续约，心跳的时间间隔,单位 s
eureka.instance.lease-renewal-interval-in-seconds=30
#如果从前一次发送心跳时间起，90秒没接收到新的心跳，将剔除服务
eureka.instance.lease-expiration-duration-in-seconds=90
#表示eureka client间隔多久去拉取服务注册信息，默认为30秒
eureka.client.registry-fetch-interval-seconds=30



#健康检测
eureka.client.healthcheck.enabled=true
#“*”号代表启用所有的监控端点，可以单独启用，例如，health，info，metrics等
management.endpoints.web.exposure.include=*
#查看详细的应用健康信息
management.endpoint.health.show-details = always



#=======================ribbon配置开始==================================================
# 关闭ribbon访问注册中心Eureka Server发现服务，但是服务依旧会注册。true使用eureka false不使用
ribbon.eureka.enabled=true

#下面的配置可以用配置类RibbonLoadBalanceMicroOrderConfig替代
ribbon.client.name=micro-order
#指定调用的节点
#ribbon.listOfServers=localhost:8001,localhost:8002,localhost:8003
#单位ms ,请求连接超时时间
ribbon.ConnectTimeout=1000
#单位ms ,请求处理的超时时间
ribbon.ReadTimeout=2000
#无论是请求超时或者socket read timeout都进行重试
ribbon.OkToRetryOnAllOperations=true
#切换实例的重试次数
ribbon.MaxAutoRetriesNextServer=0
#对当前实例的重试次数 当Eureka中可以找到服务，但是服务连不上时将会重试
ribbon.MaxAutoRetries=1

#micro-order.ribbon.NFLoadBalancerRuleClassName=com.netflix.loadbalancer.RandomRule
#micro-order.ribbon.NFLoadBalancerPingClassName=com.netflix.loadbalancer.PingUrl
#=======================ribbon配置结束=====================================================



#=======================hystrix配置开始=====================================================
#下面这些属性对应HystrixCommandProperties这个类
#true表示强制打开断路器，拒绝所有请求
# 这里的queryContents是@HystrixCommand注解中的commandKey
hystrix.command.queryContents.circuitBreaker.forceOpen = false

#超时时间
hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds=5000

# 该属性设置在滚动时间窗口中，断路器的最小请求数。默认20，如果在窗口时间内请求次数19，即使19个全部失败，断路器也不会打开
hystrix.command.queryContents.circuitBreaker.requestVolumeThreshold = 20
# 该属性设置断路器打开的错误百分比。在滚动时间内，在请求数量超过circuitBreaker.requestVolumeThreshold,
# 如果错误请求数的百分比超过这个比例，断路器就为打开状态,默认50
hystrix.command.queryContents.circuitBreaker.errorThresholdPercentage = 50
# 设置滚动时间窗的长度，单位毫秒。这个时间窗口就是断路器收集信息的持续时间。断路器在收集指标信息的时会根据这个时间窗口把这个窗口拆分成多个桶，
# 每个桶代表一段时间的指标，默认10000
hystrix.command.queryContents.metrics.rollingStats.timeInMilliseconds = 10000

# 该属性用来设置当断路器打开之后的休眠时间，休眠时间结束后断路器为半开状态，断路器能接受请求，如果请求失败又重新回到打开状态，
# 如果请求成功又回到关闭状态,默认5000
hystrix.command.queryContents.circuitBreaker.sleepWindowInMilliseconds = 5000
#=======================hystrix配置结束=====================================================



#feign开启熔断器，不打开这个配置则feign的服务降级功能不生效
feign.hystrix.enabled=true